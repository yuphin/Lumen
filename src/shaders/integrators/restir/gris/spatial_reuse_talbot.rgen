#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#define SCENE_TEX_IDX 7
#include "gris_commons.glsl"
GrisDirectLighting direct_lighting_buffer = GrisDirectLighting(scene_desc.gris_direct_lighting_addr);
PrefixContributions prefix_contributions = PrefixContributions(scene_desc.prefix_contributions_addr);
layout(binding = 4, std430) readonly buffer InReservoirs { Reservoir in_reservoirs[]; };
layout(binding = 5, std430) writeonly buffer OutReservoirs { Reservoir out_reservoirs[]; };
layout(binding = 6, std430) readonly buffer CurrGBuffer { GBuffer curr_gbuffers[]; };
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.total_frame_num ^ pc_ray.random_num);

ivec2 get_neighbor_offset(inout uvec4 seed) {
	const float randa = rand(seed) * PI2;
	const float randr = sqrt(rand(seed)) * pc_ray.spatial_radius;
	return ivec2(floor(cos(randa) * randr), floor(sin(randa) * randr));
}

void main() {
	GBuffer gbuffer = curr_gbuffers[pixel_idx];
	if (!gbuffer_data_valid(gbuffer)) {
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0));
		return;
	}
	HitData canonical_gbuffer =
		get_hitdata(gbuffer.barycentrics, gbuffer.primitive_instance_id.y, gbuffer.primitive_instance_id.x);

	Reservoir reservoir;
	init_reservoir(reservoir);

	Reservoir canonical_reservoir = in_reservoirs[pixel_idx];

	int num_spatial_samples = pc_ray.enable_spatial_reuse == 1 ? int(pc_ray.num_spatial_samples) : 0;
	vec3 curr_reservoir_contribution = vec3(0);

	uint seed_helper = pc_ray.total_frame_num ^ pc_ray.random_num;
	ivec2 offsets[12];
	for (int i = 0; i < 12; i++) {
		offsets[i] = get_neighbor_offset(seed);
	}
	float mis_weight_sum = 0;
	for (int i = -1; i < num_spatial_samples; i++) {
		ivec2 rand_offset = i == -1 ? ivec2(0) : offsets[i];
		const ivec2 neighbor_coords = ivec2(gl_LaunchIDEXT.xy) + rand_offset;
		if (any(lessThan(neighbor_coords, ivec2(0))) || any(greaterThanEqual(neighbor_coords, gl_LaunchSizeEXT.xy))) {
			continue;
		}
		const uint neighbor_pixel_idx = neighbor_coords.x * pc_ray.size_y + neighbor_coords.y;
		GBuffer neighbor_gbuffer = curr_gbuffers[neighbor_pixel_idx];
		if (!gbuffer_data_valid(neighbor_gbuffer)) {
			continue;
		}

		HitData unpacked_neighbor_gbuffer =
			get_hitdata(neighbor_gbuffer.barycentrics, neighbor_gbuffer.primitive_instance_id.y,
						neighbor_gbuffer.primitive_instance_id.x);
		bool valid_reservoir = false;
		const Reservoir neighbor_reservoir = in_reservoirs[neighbor_pixel_idx];
		if (!reservoir_data_valid(neighbor_reservoir.data)) {
			continue;
		}
		float jacobian;
		vec3 reservoir_contribution = vec3(0);
		float p_sum = 0;
		float p_curr = 0;
		if (i == -1) {
			valid_reservoir = neighbor_reservoir.W > 0;
			jacobian = 1.0;
			reservoir_contribution = neighbor_reservoir.data.reservoir_contribution;
		} else {
			valid_reservoir = reconnect_paths(canonical_gbuffer, unpacked_neighbor_gbuffer, neighbor_reservoir.data,
											  gl_LaunchIDEXT.xy, uvec2(neighbor_coords), seed_helper, jacobian,
											  reservoir_contribution);
		}

		float reservoir_pdf = calc_target_pdf(reservoir_contribution) * jacobian;
		if (reservoir_pdf * neighbor_reservoir.W * neighbor_reservoir.M > 0.0 && !isnan(reservoir_pdf)) {
			LOG_CLICKED3("%d - %f - %v2i\n", i, jacobian, rand_offset);
			for (int j = -1; j < num_spatial_samples; j++) {
				if (j == -1) {
					float p = calc_target_pdf(reservoir_contribution) * canonical_reservoir.M;
					p_sum += p;
					if (i == -1) {
						p_curr = p;
					}
				} else {
					if (i == j) {
						p_curr = jacobian == 0 ? 0
											   : calc_target_pdf(neighbor_reservoir.data.reservoir_contribution) *
													 float(neighbor_reservoir.M) / jacobian;
						p_sum += p_curr;
						continue;
					}
					const ivec2 validation_coords = ivec2(gl_LaunchIDEXT.xy) + offsets[j];
					if (any(lessThan(validation_coords, ivec2(0))) ||
						any(greaterThanEqual(validation_coords, gl_LaunchSizeEXT.xy))) {
						continue;
					}
					const uint validation_pixel_idx = validation_coords.x * pc_ray.size_y + validation_coords.y;
					GBuffer validation_gbuffer = curr_gbuffers[validation_pixel_idx];
					if (!gbuffer_data_valid(validation_gbuffer)) {
						continue;
					}
					const Reservoir validation_reservoir = in_reservoirs[validation_pixel_idx];
					HitData unpacked_validation_gbuffer =
						get_hitdata(validation_gbuffer.barycentrics, validation_gbuffer.primitive_instance_id.y,
									validation_gbuffer.primitive_instance_id.x);
					float target_pdf_in_neighbor = 0;
					bool valid = reconnect_paths_and_evaluate(
						unpacked_validation_gbuffer, canonical_gbuffer, neighbor_reservoir.data, gl_LaunchIDEXT.xy,
						uvec2(validation_coords), seed_helper, target_pdf_in_neighbor);
					p_sum += target_pdf_in_neighbor * validation_reservoir.M;
				}
			}
		}
		float mis_weight = p_sum <= 0.0 ? 0.0 : p_curr / p_sum;
		bool accepted = combine_reservoir(seed, reservoir, neighbor_reservoir, reservoir_pdf * mis_weight);
		if (accepted) {
			curr_reservoir_contribution = reservoir_contribution;
		}
	}
	const float target_pdf = calc_target_pdf(curr_reservoir_contribution);
	reservoir.W = target_pdf == 0.0 ? 0.0 : reservoir.w_sum / (target_pdf);

	vec3 final_contribution = prefix_contributions.d[pixel_idx];
	if (reservoir.W > 0) {
		final_contribution += curr_reservoir_contribution * reservoir.W;
	}
	out_reservoirs[pixel_idx] = reservoir;

	vec3 col = vec3(0);
	if (pc_ray.direct_lighting == 1) {
		col += direct_lighting_buffer.d[pixel_idx];
	}
	if (pc_ray.show_reconnection_radiance == 1) {
		col += reservoir.data.rc_postfix_L;
	} else {
		col += final_contribution;
	}

	ivec2 neighbor_coords = ivec2(gl_LaunchIDEXT.xy);
	if (pc_ray.enable_accumulation == 0 || pc_ray.frame_num == 0) {
		imageStore(image, ivec2(neighbor_coords), vec4(col, 1.f));
	} else {
		float w = 1. / float(pc_ray.frame_num + 1);
		vec3 old_col = imageLoad(image, ivec2(neighbor_coords)).xyz;
		imageStore(image, ivec2(neighbor_coords), vec4(mix(old_col, col, w), 1.f));
	}
}