#version 460
#extension GL_EXT_ray_query : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#define SCENE_TEX_IDX 9
#include "gris_commons.glsl"

PrefixContributions prefix_contributions = PrefixContributions(scene_desc.prefix_contributions_addr);

layout(binding = 4, std430) writeonly buffer OutReservoirs { Reservoir out_reservoirs[]; };
layout(binding = 5, std430) writeonly buffer OutGBuffer { GBuffer out_gbuffers[]; };
layout(binding = 6, rgba16) writeonly uniform image2D canonical_contributions_tex;
layout(binding = 7, rgba32f) uniform image2D direct_lighting_img;
layout(binding = 8, rgba32f) uniform image2D caustics_texture;
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer PhotonEyeDataBuffer { PhotonEyeData d[]; };
PhotonEyeDataBuffer photon_eye_data = PhotonEyeDataBuffer(scene_desc.photon_eye_addr);

uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc.general_seed);
uvec4 sampling_seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc.sampling_seed);

void record_path_flag(inout uint path_flag, bool is_rough, uint depth) {
	path_flag = path_flag | (is_rough ? 1u << depth : 0);
}

void print_path(uint path_flag, uint depth) {
	LOG_CLICKED("Path (%d): ", depth);
	for (int i = 0; i <= depth; i++) {
		if ((path_flag & (1u << i)) != 0) {
			LOG_CLICKED0("D");
		} else {
			LOG_CLICKED0("S");
		}
	}
	LOG_CLICKED0("\n");
}
void main() {
	const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = in_uv * 2.0 - 1.0;
	vec4 origin = ubo.inv_view * vec4(0, 0, 0, 1);
	vec3 direction = vec3(sample_camera(d));
	vec3 col = vec3(0);
	bool debug_val = false;

	GBuffer gbuffer_out;
	init_gbuffer(gbuffer_out);

	// General variables
	bool vertex_specular = false;
	vec3 throughput = vec3(1);
	vec3 direct_lighting = vec3(0);
	float bsdf_pdf_fwd = 1;

	// GRIS variables
	bool connectable_vertex_found = false;
	bool prev_rough = false;
	bool curr_rough = false;
	Reservoir reservoir;
	GrisData reconnection_data;
	init_reservoir(reservoir);
	init_data(reconnection_data);
	init_data(reservoir.data);

	reconnection_data.rc_wi = vec2(0);

	// Throughput after the reconnection vertex
	vec3 postfix_throughput = vec3(1);
	// Whether the normals at the reconnection vertex has been flipped
	bool rc_side = false;
	// Reconnection pdf times the geometry term at the reconnection vertex
	float rc_partial_jacobian = 1;

	int prefix_depth = 0;
	vec3 prefix_col = vec3(0);
	// Common reconnection data
	uint rc_coords = gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y;
	bool valid_reservoir = false;
	bool connectable = false;
	bool was_connectable = false;

	vec3 postfix_L = vec3(0);
	int postfix_depth = 0;

	// Record initial seed after direct light sampling
	ASSERT(sampling_seed.w == 0);

	vec3 throughput_until_rc = vec3(1);

	vec3 selected_contribution = vec3(0);

	uint path_flags = 0;

	bool mis_factor_set = false;
	vec3 debug_col = vec3(0);
	float d_vm = 0;

	int depth = 0;
	for (;; depth++) {
		traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, origin.xyz, tmin, direction, tmax, 0);
		const bool found_isect = payload.instance_idx != -1;

		if (!found_isect) {
#ifdef ENABLE_ATMOSPHERE
			vec3 atmosphere_L = shade_atmosphere(pc.dir_light_idx, pc.sky_col, origin.xyz, direction, tmax);
#else
			vec3 atmosphere_L = pc.sky_col;
#endif	// ENABLE_ATMOSPHERE
			vec3 contribution = throughput * atmosphere_L;
			if (depth > 1) {
				col += contribution;
				if (mis_factor_set) {
					debug_col += contribution;
				}
			} else {
				direct_lighting += contribution;
			}
			if (connectable_vertex_found) {
#if STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
				reconnection_data.rc_Li = postfix_throughput * atmosphere_L;
				reconnection_data.reservoir_contribution = calc_target_pdf(contribution);
				reconnection_data.path_flags =
					(reconnection_data.path_flags & 0xFFFF0000) |
					pack_path_flags(prefix_depth, depth - prefix_depth, RECONNECTION_TYPE_DEFAULT, false);
				bool merged =
					stream_reservoir(seed, reservoir, reconnection_data, reconnection_data.reservoir_contribution, 1.0);
				if (merged) {
					selected_contribution = contribution;
				}
				valid_reservoir = valid_reservoir || merged;
#else	// STREAMING_MODE != STREAMING_MODE_INDIVIDUAL
				postfix_L += postfix_throughput * atmosphere_L;
#endif	// STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
			} else if (depth > 1) {
				prefix_col += contribution;
			}
			break;
		}

		float triangle_area = 0;
		HitData gbuffer = get_hitdata(payload.attribs, payload.instance_idx, payload.triangle_idx, triangle_area);
		const Material hit_mat = load_material(gbuffer.material_idx, gbuffer.uv);

		record_path_flag(path_flags, is_rough(hit_mat), depth);

		const vec3 wo = -direction;
		vec3 n_s = gbuffer.n_s;
		vec3 n_g = gbuffer.n_g;

		bool side = face_forward(n_s, n_g, wo);

		prev_rough = curr_rough;
		curr_rough = is_rough(hit_mat);
		was_connectable = connectable;

		bool far_constaint_satisfied =
			length(gbuffer.pos - origin.xyz) > pc.min_vertex_distance_ratio * pc.scene_extent;
		bool constraints_satisfied = curr_rough && far_constaint_satisfied;

		if (connectable_vertex_found) {
			postfix_depth++;
		} else if (depth > 0) {
			set_bounce_flag(reconnection_data.path_flags, depth, constraints_satisfied);
		} else {
			set_bounce_flag(reconnection_data.path_flags, 0, curr_rough);
		}

		const bool connectable_this_vertex = was_connectable && prev_rough && constraints_satisfied;

		if (connectable_this_vertex) {
			vec2 rc_barycentrics = payload.attribs;
			uvec2 rc_primitive_instance_id = uvec2(payload.triangle_idx, payload.instance_idx);
			reconnection_data.rc_barycentrics = rc_barycentrics;
			reconnection_data.rc_primitive_instance_id = rc_primitive_instance_id;
			reconnection_data.rc_coords = rc_coords;
#if DEBUG == 1
			reconnection_data.debug_sampling_seed = sampling_seed;
			reconnection_data.debug_sampling_seed.w -= 3;
#endif	// DEBUG == 1

			connectable_vertex_found = true;
			prefix_depth = depth - 1;
			// Seed is not relevant here
			reconnection_data.rc_seed = -1;

#if STREAMING_MODE == STREAMING_MODE_SPLIT
			// Partially fill in the contribution data (For STREAMING_MODE_SPLIT)
			throughput_until_rc = throughput;
#endif	// STREAMING_MODE == STREAMING_MODE_SPLIT
			vec3 to_prev = origin.xyz - gbuffer.pos;
			reconnection_data.rc_partial_jacobian = abs(dot(n_s, wo)) * rc_partial_jacobian / dot(to_prev, to_prev);
		}

		connectable = !connectable_vertex_found && curr_rough;

		float cos_theta_wo = abs(dot(n_s, wo));
		d_vm = cos_theta_wo > 0 ? d_vm / cos_theta_wo : 0;
		if (mis_factor_set) {
			ASSERT(debug_val == true);
			if(depth == 2) {
				// LOG_CLICKED2("Ok %d: %f\n", depth, d_vm);
			}
		}

		if (depth == 0) {
			// Fill in GBuffer
			direct_lighting += throughput * hit_mat.emissive_factor;
			gbuffer_out.barycentrics = payload.attribs;
			gbuffer_out.primitive_instance_id = uvec2(payload.triangle_idx, payload.instance_idx);
		} else {
			float g = abs(dot(wo, n_s)) / (payload.dist * payload.dist);
			float pdf_light_w = 1.0 / (g * triangle_area);
			float mis_bsdf;

			float mis_light;
			if (mis_factor_set) {
				float light_pick_prob = 1.0 / pc.light_triangle_count;
				float cos_from_light = max(dot(n_s, wo), 0);
				float pdf_light_dir = cos_from_light / PI;
				// For photon mapping, multiplication by light pick prob. is necessary
				mis_light = cos_from_light == 0 ? 0 :  pdf_light_dir * (1.0 / triangle_area) * d_vm / cos_from_light;
				// mis_light = 0;
			} else {
				mis_light = 0;
			}

			if (!vertex_specular) {
				mis_bsdf = pdf_light_w / bsdf_pdf_fwd;
				// mis_bsdf = 0;
			} else {
				mis_bsdf = 0;
			}
			float mis_weight = 1.0 / (1 + mis_bsdf + mis_light);
			ASSERT(!isnan(mis_weight));
			if(!mis_factor_set) {
				// mis_weight = 0;
			}

			vec3 partial_contrib = mis_weight * hit_mat.emissive_factor;
			// vec3 partial_contrib = 0 * hit_mat.emissive_factor;
			if(mis_light > 0) {
				// LOG_CLICKED2("BSDF: %f - %f\n", mis_light, mis_weight);
				// test_col += partial_contrib * throughput;
			}

			if (connectable_vertex_found && depth > 1) {
#if STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
				// Stream in the emissive contribution
				// If the previous vertex was the connection vertex, delay MIS computation to the shifting phase
				vec3 partial_contrib_for_rc = (was_connectable ? hit_mat.emissive_factor : partial_contrib);
				reconnection_data.rc_Li = postfix_throughput * partial_contrib_for_rc;

				vec3 contrib = partial_contrib_for_rc * throughput;
				if (was_connectable) {
					contrib *= mis_weight;
					reconnection_data.rc_seed = floatBitsToUint(pdf_light_w);
				}
				reconnection_data.reservoir_contribution = calc_target_pdf(contrib);
				reconnection_data.path_flags =
					(reconnection_data.path_flags & 0xFFFF0000) |
					pack_path_flags(prefix_depth, depth - prefix_depth,
									was_connectable ? RECONNECTION_TYPE_EMISSIVE_AFTER_RC : RECONNECTION_TYPE_DEFAULT,
									side);
				bool merged =
					stream_reservoir(seed, reservoir, reconnection_data, reconnection_data.reservoir_contribution, 1.0);
				if (merged) {
					selected_contribution = contrib;
				}
				valid_reservoir = valid_reservoir || merged;
#else	// STREAMING_MODE != STREAMING_MODE_INDIVIDUAL
				postfix_L += partial_contrib * postfix_throughput;
#endif	// STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
			} else if (depth > 1) {
				prefix_col += partial_contrib * throughput;
			}
			if (depth == 1) {
				direct_lighting += partial_contrib * throughput;
			} else {
				col += partial_contrib * throughput;
				float lum = luminance(partial_contrib * throughput);
				if (mis_factor_set && lum > 0) {
					debug_col += partial_contrib * throughput;
				}
			}
		}

		if (depth >= pc.max_depth - 1) {
			break;
		}

		vertex_specular = (hit_mat.bsdf_props & BSDF_FLAG_SPECULAR) != 0;

		// Sample direction
		float cos_theta;

		const vec3 f =
			sample_bsdf(n_s, wo, hit_mat, 1 /*radiance=cam*/, side, direction, bsdf_pdf_fwd, cos_theta, sampling_seed);

		float bsdf_pdf_rev = bsdf_pdf(hit_mat, n_s, direction, wo, side);

		
		if (connectable_this_vertex) {
			reconnection_data.rc_partial_jacobian *= bsdf_pdf_fwd;
			reconnection_data.rc_wi = to_spherical(direction);
		}

		if(depth == 2) {
				// LOG_CLICKED2("Now %d: %f\n", depth, d_vm);

			}

		// NEE
		if (!vertex_specular) {
			uint rc_seed = seed.w;
			uvec4 debug_seed = seed;
			bool is_directional_light;
			LightRecord light_record;

			vec3 Le;
			vec3 nee_wi;
			float nee_pdf_light_w;
			vec3 Li = do_nee(seed, gbuffer.pos, hit_mat, side, n_s, wo, mis_factor_set ? d_vm : 0.0, light_record,
							 reconnection_data.rc_Li, is_directional_light, Le, nee_wi, nee_pdf_light_w, depth);
			vec3 contribution = Li * throughput;
			// At 0 depth, we let ReSTIR DI handle the direct lighting
			bool nee_connectable = depth > 0 && connectable;

			// Stream the NEE path at the reconnection vertex
			if (nee_connectable && any(greaterThan(Li, vec3(0)))) {
				reconnection_data.rc_coords = rc_coords;
				// reconnection_data.rc_partial_jacobian = rc_partial_jacobian;
				reconnection_data.rc_partial_jacobian = 1;
				reconnection_data.rc_barycentrics = light_record.bary;
				reconnection_data.rc_primitive_instance_id = uvec2(light_record.triangle_idx, light_record.light_idx);
#if DEBUG == 1
				reconnection_data.debug_seed = debug_seed;
				reconnection_data.debug_sampling_seed = sampling_seed;
				reconnection_data.debug_sampling_seed.w -= 3;
#endif
				reconnection_data.rc_seed = rc_seed;
				reconnection_data.reservoir_contribution = calc_target_pdf(contribution);
				reconnection_data.path_flags = (reconnection_data.path_flags & 0xFFFF0000) |
											   pack_path_flags(depth, 1, RECONNECTION_TYPE_NEE, side) |
											   uint(is_directional_light) << 14;

				bool merged =
					stream_reservoir(seed, reservoir, reconnection_data, reconnection_data.reservoir_contribution, 1.0);
				if (merged) {
					set_bounce_flag(reservoir.data.path_flags, depth + 1, true);
					selected_contribution = contribution;
				}
				valid_reservoir = valid_reservoir || merged;

				if (!valid_reservoir) {
					ASSERT(reservoir.data.path_flags == 0);
				} else {
					ASSERT(reservoir.data.path_flags != 0);
				}

			} else if (connectable_vertex_found) {
				reconnection_data.rc_Li = postfix_throughput * Li;
				reconnection_data.reservoir_contribution = calc_target_pdf(contribution);
				reconnection_data.path_flags =
					(reconnection_data.path_flags & 0xFFFF0000) |
					pack_path_flags(prefix_depth, depth - prefix_depth + 1, RECONNECTION_TYPE_DEFAULT, side);
				bool merged =
					stream_reservoir(seed, reservoir, reconnection_data, reconnection_data.reservoir_contribution, 1.0);
				if (merged) {
					selected_contribution = contribution;
				}
				if (merged && connectable_this_vertex) {
					ASSERT(postfix_throughput == vec3(1));
					reservoir.data.rc_wi = to_spherical(nee_wi);
					reservoir.data.rc_Li = Le;
					reservoir.data.path_flags = (reservoir.data.path_flags & ~0x7u) | RECONNECTION_TYPE_NEE_AFTER_RC;
					reservoir.data.rc_seed = floatBitsToUint(nee_pdf_light_w);
					if (bsdf_pdf_fwd != 0) {
						reservoir.data.rc_partial_jacobian /= bsdf_pdf_fwd;
					}
				}
#if STREAMING_MODE == STREAMING_MODE_SPLIT
				else if (connectable_this_vertex) {
					postfix_L += Li * postfix_throughput;
				}
#endif	// STREAMING_MODE == STREAMING_MODE_SPLIT
				valid_reservoir = valid_reservoir || merged;
			}

			if (depth > 0) {
				col += contribution;
				if (mis_factor_set) {
					debug_col += contribution;
				}
			} else {
				direct_lighting += contribution;
			}
		}

		float abs_cos_theta = abs(cos_theta);
		d_vm *= abs_cos_theta;
		if (mis_factor_set) {
			ASSERT(debug_val == true);
			if (!vertex_specular) {
				d_vm *= bsdf_pdf_rev / bsdf_pdf_fwd;
			}
			// LOG_CLICKED("First non-diffuse: %f\n", d_vm);
		}

		const bool is_transmission = bsdf_has_property(hit_mat.bsdf_props, BSDF_FLAG_TRANSMISSION);
		origin.xyz = offset_ray(gbuffer.pos, n_g, is_transmission);

		if (bsdf_pdf_fwd == 0) {
			break;
		}
		vec3 f_cos = f * abs(cos_theta);
		throughput *= f_cos / bsdf_pdf_fwd;
		if (!mis_factor_set && is_rough(hit_mat)) {
			// d_vm = nu * cos_theta * bsdf_pdf_rev / bsdf_pdf_fwd;
			// bsdf_pdf_fwd will cancel during vertex merging
			d_vm = PI * pc.photon_radius * pc.photon_radius * pc.num_photons * abs_cos_theta / bsdf_pdf_fwd;

			// if(d_vm == 1.0) {
			// 	LOG3("%f - %f - %f\n", cos_theta, bsdf_pdf_rev, bsdf_pdf_fwd);
			// }
			debug_val = true;
		}

#ifdef ENABLE_PM
		// Modify the throuhgput for SDS paths (for photon mapping)
		if (was_connectable && !is_rough(hit_mat)) {
			mis_factor_set = true;
		}
#endif	// ENABLE_PM

		if (connectable_vertex_found && !connectable_this_vertex) {
			postfix_throughput *= f_cos / bsdf_pdf_fwd;
		}
#if STREAMING_MODE == STREAMING_MODE_SPLIT
		else if (connectable_vertex_found) {
			throughput_until_rc *= f_cos / bsdf_pdf_fwd;
		}
#endif	// STREAMING_MODE == STREAMING_MODE_SPLIT

		rc_partial_jacobian = bsdf_pdf_fwd;
		if (pc.enable_rr == 1) {
			float rr_scale = 1.0;
			if (is_transmission) {
				rr_scale *= side ? 1. / hit_mat.ior : hit_mat.ior;
			}
			if (depth > RR_MIN_DEPTH) {
				float rr_prob = min(0.95f, luminance(throughput) * rr_scale);
				if (rr_prob == 0 || rr_prob < rand(seed))
					break;
				else
					throughput /= rr_prob;
			}
		}
	}

	if (isnan(luminance(col))) {
		return;
	}
	if (pc.enable_gris == 1 && connectable_vertex_found) {
#if STREAMING_MODE == STREAMING_MODE_SPLIT
		reconnection_data.rc_Li = postfix_L;
		const vec3 contrib = throughput_until_rc * postfix_L;
		reconnection_data.reservoir_contribution = calc_target_pdf(contrib);
		reconnection_data.path_flags = (reconnection_data.path_flags & 0xFFFF0000) |
									   pack_path_flags(prefix_depth, postfix_depth, RECONNECTION_TYPE_DEFAULT, rc_side);
		bool merged =
			stream_reservoir(seed, reservoir, reconnection_data, reconnection_data.reservoir_contribution, 1.0);
		if (merged) {
			selected_contribution = contrib;
		}
		valid_reservoir = valid_reservoir || merged;
#endif	// STREAMING_MODE == STREAMING_MODE_SPLIT
		if (valid_reservoir) {
			uint rc_type;
			uint rc_prefix_length;
			uint rc_postfix_length;
			bool side;
			bool is_directional_light;
			unpack_path_flags(reservoir.data.path_flags, rc_type, rc_prefix_length, rc_postfix_length, side,
							  is_directional_light);
			ASSERT(reservoir.data.path_flags != 0);
			ASSERT(rc_type != RECONNECTION_TYPE_INVALID);

			if (rc_type != RECONNECTION_TYPE_NEE) {
				ASSERT(reservoir_data_valid(reservoir.data));
			}

			if (rc_type == RECONNECTION_TYPE_DEFAULT) {
				bool rc_last_vertex = false;
#if STREAMING_MODE == STREAMING_MODE_SPLIT
				rc_last_vertex = rc_postfix_length <= 1;
#endif	// STREAMING_MODE == STREAMING_MODE_SPLIT
				if (!rc_last_vertex) {
					ASSERT(reservoir.data.rc_wi != vec2(0));
				}
			}
		}
	}
	if (pc.direct_lighting == 1) {
		col += direct_lighting;
	}

	if (pc.enable_gris == 1) {
		ASSERT(reservoir.w_sum >= reservoir.target_pdf);
		// The samples are additive, therefore set M to 1
		reservoir.M = 1;
		calc_reservoir_W(reservoir);
		prefix_contributions.d[pixel_idx] = prefix_col;
		reservoir.data.seed_helpers = uvec2(pc.general_seed, pc.sampling_seed);
		float uv_x = float(gl_LaunchIDEXT.x) / float(gl_LaunchSizeEXT.x);
		if (pc.canonical_only == 1 || uv_x >= pc.gris_separator) {
			col = prefix_col + selected_contribution * reservoir.W;
			if (pc.direct_lighting == 1) {
				col += direct_lighting;
			}
		}
		if (pc.direct_lighting == 1) {
			imageStore(direct_lighting_img, ivec2(gl_LaunchIDEXT.xy), vec4(direct_lighting, 1));
		} else {
			imageStore(direct_lighting_img, ivec2(gl_LaunchIDEXT.xy), vec4(0));
		}
		if (!valid_reservoir) {
			ASSERT(!reservoir_data_valid(reservoir.data));
			ASSERT(reservoir.data.path_flags == 0);
		}

		if (pc.canonical_only == 0) {
			imageStore(canonical_contributions_tex, ivec2(gl_LaunchIDEXT.xy), vec4(selected_contribution, 1));
			out_reservoirs[pixel_idx] = reservoir;
			out_gbuffers[pixel_idx] = gbuffer_out;
		}
	}

	// col = debug_col;
	// col = test_col;
	// col = vec3(0);

	// col += imageLoad(caustics_texture, ivec2(gl_LaunchIDEXT.xy)).xyz;
#ifdef ENABLE_PM
	col += imageLoad(caustics_texture, ivec2(gl_LaunchIDEXT.xy)).xyz;
#endif	// ENABLE_PM

	if (pc.enable_accumulation == 0 || pc.frame_num == 0) {
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(col, 1.f));
	} else {
		float w = 1. / float(pc.frame_num + 1);
		vec3 old_col = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_col, col, w), 1.f));
	}
}