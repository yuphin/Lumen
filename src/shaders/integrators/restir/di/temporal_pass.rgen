#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "../../nrc/nrc_commons.h"
layout(push_constant) uniform _PushConstantRay { PCNRC pc_ray; };
// #include "restirdi_commons.h"
#include "restirdi_commons.glsl"
#include "../../pt_commons.glsl"

void main() {
    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;
    origin = (ubo.inv_view * vec4(0, 0, 0, 1)).xyz;
    vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
    vec3 direction = vec3(sample_camera(d));
    vec3 throughput = vec3(1);
    RestirReservoir r_new;
    RestirReservoir r_prev;
    RestirReservoir r;
    init_reservoir(r_new);
    init_reservoir(r_prev);
    init_reservoir(r);
    r.s.seed = seed;
    r_new.s.seed = seed;
    traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, origin, tmin, direction, tmax, 0);

    pos = payload.pos;
    uv = payload.uv;
    mat_idx = payload.material_idx;
    const bool found_isect = mat_idx != -1;
    const vec3 wo = normalize(origin - pos);
    if (found_isect) {
        vec3 n_s = payload.n_s;
        bool side = true;
        vec3 n_g = payload.n_g;
        if (dot(payload.n_g, wo) < 0.)
            n_g = -n_g;
        if (dot(n_g, payload.n_s) < 0) {
            n_s = -n_s;
            side = false;
        }
        normal = n_s;
        float cos_wo = dot(wo, n_s);

        const Material hit_mat = load_material(mat_idx, uv);

        // Generate samples

        const uint M = 32;
        const uint light_samples = min(pc_ray.light_triangle_count, 32);

        if (pc_ray.do_spatiotemporal == 1 &&
            ((hit_mat.bsdf_props & BSDF_SPECULAR) == 0)) {

            vec4 prev_pos = ubo.prev_view * vec4(pos, 1);
            prev_pos /= prev_pos.z;
            prev_pos = -ubo.prev_projection * prev_pos;
            ivec2 prev_coords =
                ivec2(0.5 * (1 + prev_pos.xy) * gl_LaunchSizeEXT.xy);
            if ((prev_coords.x < gl_LaunchSizeEXT.x && prev_coords.x >= 0) &&
                (prev_coords.y < gl_LaunchSizeEXT.y && prev_coords.y >= 0)) {
                r_prev = temporal_reservoirs.d[pixel_idx];
            }
        }

        for (int i = 0; i < light_samples; i++) {
            const uvec4 light_seed = seed;
            const vec4 rands =
                vec4(rand(seed), rand(seed), rand(seed), rand(seed));
            vec3 wi;
            float wi_len;
            float pdf_light;
            LightRecord record;
            float cos_from_light;
            vec3 light_pos, light_n;
            const vec3 Le = sample_light_Li(
                rands, payload.pos, pc_ray.num_lights, wi, wi_len, light_n,
                light_pos, pdf_light, cos_from_light, record);

            float bsdf_pdf;
            float cos_x = dot(normal, wi);
            const float g = abs(cos_from_light) / (wi_len * wi_len);
            const vec3 f =
                eval_bsdf(normal, wo, hit_mat, 1, side, wi, bsdf_pdf, cos_x);

            pdf_light *= 1 / pc_ray.num_lights;
            // f * L * G / pdf
            RestirData s;
            s.light_idx = record.light_idx;
            s.light_mesh_idx = record.triangle_idx;
            s.seed = light_seed;
            const float p_hat = length(f * Le * abs(cos_x) * g);
            update_reservoir(r_new, s, p_hat / pdf_light);
        }

        // Visibility check for the selected candidate
        if (r_new.w_sum > 0) {
            vec2 uv_unused;
            const RestirData s = r_new.s;
            uvec4 r_seed = s.seed;
            const uint light_triangle_idx = s.light_mesh_idx;
            const uint light_idx = s.light_idx;
            vec3 light_pos, light_n;
            const vec4 rands =
                vec4(rand(r_seed), rand(r_seed), rand(r_seed), rand(r_seed));

            vec3 Le = sample_light_with_idx(
                rands, payload.pos, pc_ray.num_lights, light_idx,
                light_triangle_idx, light_pos, light_n);

            vec3 wi = light_pos - payload.pos;
            const float wi_len = length(wi);
            wi /= wi_len;

            any_hit_payload.hit = 1;
            traceRayEXT(tlas,
                        gl_RayFlagsTerminateOnFirstHitEXT |
                            gl_RayFlagsSkipClosestHitShaderEXT,
                        0xFF, 1, 0, 1, offset_ray2(pos, normal), 0, wi,
                        wi_len - EPS, 1);
            vec3 f = eval_bsdf(hit_mat, wo, wi, normal);
            const float cos_x = dot(normal, wi);
            const float g = abs(dot(light_n, -wi)) / (wi_len * wi_len);
            bool visible = any_hit_payload.hit == 0 && f != vec3(0);
            r_new.W = 0;
            if (visible) {
                const float p_hat = length(f * Le * abs(cos_x) * g);
                if (p_hat == 0) {
                    r_new.W = 0;
                } else {
                    r_new.W = r_new.w_sum / (p_hat * r_new.m);
                }
            }
        }
        // Temporal reuse
        combine_reservoir(r, r_new);
        uint num_samples = r_new.m;
        if (pc_ray.do_spatiotemporal == 1) {
            r_prev.m = min(20 * r.m, r_prev.m);
            combine_reservoir(r, r_prev);
            num_samples += r_prev.m;
        }
        r.m = num_samples;
        if (r_new.W > 0 || r_prev.W > 0) {
            const float phat = calc_p_hat(r) * r.m;
            r.W = phat == 0 ? 0 : r.w_sum / (phat);
        } else {
            r.W = 0;
        }

        // Write to g-buffer
        gbuffer.d[pixel_idx].pos = pos;
        gbuffer.d[pixel_idx].normal = normal;
        gbuffer.d[pixel_idx].uv = uv;
        gbuffer.d[pixel_idx].mat_idx = mat_idx;

        // // Sample direction & update throughput
        // vec3 col = hit_mat.emissive_factor;
        // float pdf, cos_theta;
        // vec3 f = sample_bsdf(normal, wo, hit_mat, 1 /*radiance=cam*/, side,
        //                      direction, pdf, cos_theta, seed);
        // throughput *= f * abs(cos_theta) / pdf;
        // bool specular = (hit_mat.bsdf_props & BSDF_SPECULAR) != 0;
        // origin = offset_ray(pos, n_g);
        // // Do traditional path tracing
        // for (int depth = 1;; depth++) {
        //     traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, origin, tmin, direction,
        //                 tmax, 0);
        //     const bool found_isect = payload.material_idx != -1;
        //     if (depth >= pc_ray.max_depth - 1) {
        //         break;
        //     }
        //     if (!found_isect) {
        //         col += throughput * pc_ray.sky_col;
        //         break;
        //     }
        //     const Material hit_mat =
        //         load_material(payload.material_idx, payload.uv);
        //     if (specular) {
        //         col += throughput * hit_mat.emissive_factor;
        //     }
        //     const vec3 wo = -direction;
        //     vec3 n_s = payload.n_s;
        //     bool side = true;
        //     vec3 n_g = payload.n_g;
        //     if (dot(payload.n_g, wo) < 0.)
        //         n_g = -n_g;
        //     if (dot(n_g, payload.n_s) < 0) {
        //         n_s = -n_s;
        //         side = false;
        //     }
        //     float cos_wo = dot(wo, n_s);
        //     origin = offset_ray(payload.pos, n_s);
        //     if ((hit_mat.bsdf_props & BSDF_SPECULAR) == 0) {
        //         const float light_pick_pdf = 1. / pc_ray.light_triangle_count;
        //         col += throughput *
        //                uniform_sample_light(seed, hit_mat, payload.pos, side, n_s, wo,
        //                                     specular) /
        //                light_pick_pdf;
        //     }
        //     // Sample direction & update throughput
        //     float pdf, cos_theta;
        //     const vec3 f = sample_bsdf(n_s, wo, hit_mat,
        //                                1
        //                                /*radiance=cam*/,
        //                                side, direction, pdf, cos_theta, seed);
        //     if (pdf == 0) {
        //         break;
        //     }
        //     throughput *= f * abs(cos_theta) / pdf;
        //     specular = (hit_mat.bsdf_props & BSDF_SPECULAR) != 0;
        //     float rr_scale = 1.0;
        //     if (hit_mat.bsdf_type == BSDF_GLASS) {
        //         rr_scale *= side ? 1. / hit_mat.ior : hit_mat.ior;
        //     }
        //     if (depth > RR_MIN_DEPTH) {
        //         float rr_prob = min(0.95f, luminance(throughput) * rr_scale);
        //         if (rr_prob < rand(seed))
        //             break;
        //         else
        //             throughput /= rr_prob;
        //     }
        // }
        // tmp_col.d[pixel_idx] = col;
    }
    // Save the reservoirs for spatial reuse
    passthrough_reservoirs.d[pixel_idx].w_sum = r.w_sum;
    passthrough_reservoirs.d[pixel_idx].W = r.W;
    passthrough_reservoirs.d[pixel_idx].m = r.m;
    passthrough_reservoirs.d[pixel_idx].s = r.s;
}