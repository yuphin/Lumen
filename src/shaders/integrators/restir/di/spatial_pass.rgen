#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#include "restirdi_commons.h"
#include "restirdi_commons.glsl"

void main() {
    const float max_r = 10;
    const float depth_threshold = 0.01;
    const float angle_threshold = 25 * PI / 180;
    const float num_neighbor_samples = 5;
    load_g_buffer();
    const RestirReservoir curr_reservoir = passthrough_reservoirs.d[pixel_idx];
    RestirReservoir r;
    init_reservoir(r);
    if (curr_reservoir.W != 0) {
        combine_reservoir(r, curr_reservoir);
        uint num_samples = r.m;
        for (int i = 0; i < num_neighbor_samples; i++) {
            // Choose a neighbor pixel
            const float randa = rand(seed) * PI2;
            const float randr = sqrt(rand(seed)) * max_r;
            ivec2 rand_offset =
                ivec2(floor(cos(randa) * randr), floor(sin(randa) * randr));
            const ivec2 coords =
                clamp(ivec2(gl_LaunchIDEXT.xy) + rand_offset, ivec2(0),
                      ivec2(gl_LaunchSizeEXT.xy) - 1);
            const uint neighbor_idx = coords.x * pc_ray.size_y + coords.y;

            const RestirReservoir r_n = passthrough_reservoirs.d[neighbor_idx];

            combine_reservoir(r, r_n);
            num_samples += r_n.m;
        }
        r.m = num_samples;
        const float phat = calc_p_hat(r);
        r.W = r.w_sum / (r.m * calc_p_hat(r));
    }
    spatial_reservoirs.d[pixel_idx].w_sum = r.w_sum;
    spatial_reservoirs.d[pixel_idx].W = r.W;
    spatial_reservoirs.d[pixel_idx].m = r.m;
    spatial_reservoirs.d[pixel_idx].s = r.s;
}