#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "restirgi_commons.h"
#include "../../../commons.glsl"
layout(location = 0) rayPayloadEXT HitPayload payload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;
#include "restirgi_commons.glsl"
#define M_MAX 500

Reservoirs spatial_reservoirs = Reservoirs(scene_desc.spatial_reservoir_addr);
Reservoirs temp_reservoirs = Reservoirs(scene_desc.temporal_reservoir_addr);
RestirSamples samples = RestirSamples(scene_desc.restir_samples_addr);

void combine_reservoir(inout Reservoir r1, const Reservoir r2,
                       const ReservoirSample q, const ReservoirSample q_n,
                       out bool gt) {

    const uint r2_m = min(r2.m, M_MAX);
    float r2_hat = p_hat(r2.s.L_o);
    // // Check visibility
    any_hit_payload.hit = 1;
    vec3 wi = r2.s.x_s - q.x_v;
    const float wi_len = length(wi);
    wi /= wi_len;
    bool visible;
    if ((q.bsdf_props & BSDF_TRANSMISSIVE) == 0) {
        traceRayEXT(tlas,
                    gl_RayFlagsTerminateOnFirstHitEXT |
                        gl_RayFlagsSkipClosestHitShaderEXT,
                    0xFF, 1, 0, 1, q.x_v, 0, wi, wi_len, 1);
        visible = any_hit_payload.hit == 0;
    } else {
        visible = q.p_q > 0;
    }

    if (!visible) {
        r2_hat = 0;
    } else {
        // Calculate Jacobian
        vec3 w_qq = q.x_v - q.x_s;
        const float w_qq_len = length(w_qq);
        w_qq /= w_qq_len;
        vec3 w_rq = r2.s.x_v - q.x_s;
        const float w_rq_len = length(w_rq);
        w_rq /= w_rq_len;
        const float qq = w_qq_len * w_qq_len;
        const float rq = w_rq_len * w_rq_len;
        const float div = rq * abs(dot(w_qq, q.n_s));
        const float j = div == 0 ? 0 : abs(dot(w_rq, q.n_s)) * qq / div;
        r2_hat *= j;
    }

    const float factor = r2_hat * r2_m * r2.W;
    gt = factor > 0;
    if (factor > 0) {
        update_reservoir(r1, r2.s, factor);
    }
}

void main() {
    // TODO: Adaptively change this
    const uint pingpong = (pc_ray.total_frame_num % 2);
    const float max_r = 10;
    const float dist_threshold = 0.01;
    const float angle_threshold = 25 * PI / 180;
    ReservoirSample q = samples.d[pixel_idx];
    Reservoir r_s;
   
    if (pc_ray.do_spatiotemporal == 1) {
        r_s = spatial_reservoirs.d[offset(pingpong ^ 1) + pixel_idx];
    } else {
        init_reservoir(r_s);
    }

    const uint max_iter = r_s.m < M_MAX / 2 ? 9 : 3;
    vec3 Q[9] = vec3[9](vec3(0), vec3(0), vec3(0), vec3(0), vec3(0), vec3(0),
                        vec3(0), vec3(0), vec3(0));
    uint Q_h[9] = uint[9](0, 0, 0, 0, 0, 0, 0, 0, 0);
    uint q_cnt = 0;

    Reservoir r;
    r.w_sum = 0;
    r.W = 0;
    r.m = 0;
    const float factor =
        pc_ray.do_spatiotemporal == 0 ? 0 : r_s.m * r_s.W * p_hat(r_s.s.L_o);
    if (factor > 0) {
        update_reservoir(r, r_s.s, factor);
    }
    uint Z = r_s.m;
    uint sum = r_s.m;
    ReservoirSample q_n;

    for (int i = 0; i < max_iter; i++) {
        // Choose a neighbor pixel
        const float randa = rand(seed) * PI2;
        const float randr = sqrt(rand(seed)) * max_r;
        ivec2 rand_offset =
            ivec2(floor(cos(randa) * randr), floor(sin(randa) * randr));
        const ivec2 coords = clamp(ivec2(gl_LaunchIDEXT.xy) + rand_offset,
                                   ivec2(0), ivec2(gl_LaunchSizeEXT.xy) - 1);
        const uint coords_idx = coords.x * pc_ray.size_y + coords.y;

        q_n = samples.d[coords_idx];
        if (length(q_n.n_s) == 0) {
            continue;
        }
        // Geometric similarity
        float dist = dot(q_n.x_v - q.x_v, q_n.x_v - q.x_v);
        if (dist > dist_threshold ||
            (dot(q_n.n_v, q.n_v)) < cos(angle_threshold)) {
            continue;
        }
        Reservoir r_n = temp_reservoirs.d[offset(pingpong ^ 1) + coords_idx];
        bool gt;
        combine_reservoir(r, r_n, q, q_n, gt);
        Q_h[q_cnt] = r_n.m;
        Q[q_cnt++] = q_n.x_s;
        sum += r_n.m;
    }
    const float phat_val = p_hat(r.s.L_o);
    if (phat_val > 0) {
        for (int i = 0; i < q_cnt; i++) {

            vec3 dir = Q[i] - r.s.x_v;
            float len = length(dir);
            dir /= len;
            const vec3 o = offset_ray(r.s.x_v, r.s.n_v);
            const bool mat_transmissive =
                (r.s.bsdf_props & BSDF_TRANSMISSIVE) == BSDF_TRANSMISSIVE;
            bool visible = true;
            if (!mat_transmissive) {
                any_hit_payload.hit = 1;
                traceRayEXT(tlas,
                            gl_RayFlagsTerminateOnFirstHitEXT |
                                gl_RayFlagsSkipClosestHitShaderEXT,
                            0xFF, 1, 0, 1, o, 0, dir, len - EPS, 1);
                visible = any_hit_payload.hit == 0;
            }
            if (visible) {
                Z += Q_h[i];
            }
        }
    }

    r.m = min(sum, M_MAX);
    r.W = Z * phat_val == 0 ? 0 : r.w_sum / (Z * phat_val);
#define sr spatial_reservoirs.d[offset(pingpong) + pixel_idx]
    sr.w_sum = r.w_sum;
    sr.W = r.W;
    sr.m = r.m;
    sr.s = r.s;
}