#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "vcm_commons.h"
#include "../../commons.glsl"
layout(location = 0) rayPayloadEXT HitPayload payload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;

layout(push_constant) uniform _PushConstantRay { PCVCM pc_ray; };
// VCM buffers
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer VCMReservoir_ { VCMReservoir d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ShouldResample { uint d; };

layout(buffer_reference, scalar, buffer_reference_align = 4) buffer LightSamples { VCMRestirData d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer SampleAvg { AvgStruct d; };
LightSamples light_samples = LightSamples(scene_desc.light_samples_addr);
ShouldResample should_resample =
    ShouldResample(scene_desc.should_resample_addr);

VCMReservoir_ temporal_reservoirs =
    VCMReservoir_(scene_desc.vcm_reservoir_addr);

SampleAvg avg = SampleAvg(scene_desc.avg_addr);

uint screen_size = gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y;
const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy,
                      pc_ray.total_frame_num ^ pc_ray.random_num);
uint vcm_light_path_idx =
    (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y) *
    (pc_ray.max_depth);

const uint FRAME_INTERVAL = 10;

uint restir_hash(ivec3 p, uint size) {
    return uint((p.x * 73856093) ^ (p.y * 19349663) ^ p.z * 83492791) % size;
}

vec3 normalize_grid(vec3 p, vec3 min_bnds, vec3 max_bnds) {
    return (p - min_bnds) / (max_bnds - min_bnds);
}

ivec3 get_grid_idx(vec3 p, vec3 min_bnds, vec3 max_bnds, ivec3 grid_res) {
    ivec3 res = ivec3(normalize_grid(p, min_bnds, max_bnds) * grid_res);
    clamp(res, vec3(0), grid_res - vec3(1));
    return res;
}

vec3 vcm_connect_cam(const vec3 cam_pos, const vec3 cam_nrm, const vec3 nrm,
                     const float cam_A, const vec3 pos, const in VCMState state,
                     const float eta_vm, const vec3 wo, const Material mat,
                     out ivec2 coords) {
    vec3 L = vec3(0);
    vec3 dir = cam_pos - pos;
    float len = length(dir);
    dir /= len;
    float cos_y = dot(dir, nrm);
    float cos_theta = dot(cam_nrm, -dir);
    if (cos_theta <= 0.) {
        return L;
    }

    // pdf_rev / pdf_fwd
    // in the case of light coming to camera
    // simplifies to abs(cos(theta)) / (A * cos^3(theta) * len^2)
    float cos_3_theta = cos_theta * cos_theta * cos_theta;
    const float cam_pdf_ratio = abs(cos_y) / (cam_A * cos_3_theta * len * len);
    vec3 ray_origin = offset_ray(pos, nrm);
    float pdf_rev, pdf_fwd;
    const vec3 f = eval_bsdf(nrm, wo, mat, 0, dot(payload.n_s, wo) > 0,
                             dir, pdf_fwd, pdf_rev, cos_y);
    if (f == vec3(0)) {
        return L;
    }
    if (cam_pdf_ratio > 0.0) {
        any_hit_payload.hit = 1;
        traceRayEXT(tlas,
                    gl_RayFlagsTerminateOnFirstHitEXT |
                        gl_RayFlagsSkipClosestHitShaderEXT,
                    0xFF, 1, 0, 1, ray_origin, 0, dir, len - EPS, 1);
        if (any_hit_payload.hit == 0) {
            const float w_light = (cam_pdf_ratio / (screen_size)) *
                                  (eta_vm + state.d_vcm + pdf_rev * state.d_vc);
            const float mis_weight = 1. / (1. + w_light);
            // We / pdf_we * abs(cos_theta) = cam_pdf_ratio
            L = mis_weight * state.throughput * cam_pdf_ratio * f / screen_size;
        }
    }
    dir = -dir;
    vec4 target = ubo.view * vec4(dir.x, dir.y, dir.z, 0);
    target /= target.z;
    target = -ubo.projection * target;
    coords = ivec2(0.5 * (1 + target.xy) * gl_LaunchSizeEXT.xy - 0.5);
    if (coords.x < 0 || coords.x >= gl_LaunchSizeEXT.x || coords.y < 0 ||
        coords.y >= gl_LaunchSizeEXT.y || dot(dir, cam_nrm) < 0) {
        return vec3(0);
    }
    return L;
}

uint get_restir_hash_idx(uint light_idx, float u, float v) {
    const int base_res =
        int(sqrt(float(screen_size) / pc_ray.light_triangle_count));
    ivec3 grid_res = ivec3(pc_ray.light_triangle_count, base_res, base_res);
    ivec3 grid_idx =
        get_grid_idx(vec3(light_idx, u, v), vec3(0, 0, 0),
                     vec3(pc_ray.light_triangle_count, 1, 1), grid_res);

    return restir_hash(grid_idx, screen_size);
}

vec3 sample_light_Le(const vec4 rands_pos, const vec2 rands_dir,
                     const int num_lights, const int total_light,
                     out uint light_idx, out uint triangle_idx,
                     out uint material_idx, out Light light,
                     out TriangleRecord record, out Material light_mat,
                     out float pdf_pos, inout uvec4 seed, out vec3 wi,
                     out float pdf_dir, out float phi, out float u,
                     out float v) {
    light_idx = uint(rands_pos.x * num_lights);
    light = lights[light_idx];
    vec3 L = vec3(0);
    uint light_type = get_light_type(light.light_flags);
    if (light_type == LIGHT_AREA) {
        record = sample_area_light(rands_pos, num_lights, light, triangle_idx,
                                   material_idx, u, v);
        vec2 uv_unused;
        light_mat = load_material(material_idx, uv_unused);
        pdf_pos = record.triangle_pdf / total_light;
        L = light_mat.emissive_factor;
        wi = sample_cos_hemisphere(rands_dir, record.n_s, phi);
        pdf_dir = (dot(wi, record.n_s)) * INV_PI;
    } else if (light_type == LIGHT_SPOT) {
        const float cos_width = cos(30 * PI / 180);
        const float cos_faloff = cos(25 * PI / 180);
        const vec3 light_dir = normalize(light.to - light.pos);
        vec4 local_quat = to_local_quat(light_dir);
        wi = rot_quat(invert_quat(local_quat),
                      uniform_sample_cone(rands_dir, cos_width));
        const float cos_theta = dot(wi, light_dir);
        float faloff;
        if (cos_theta < cos_width) {
            faloff = 0;
        } else if (cos_theta >= cos_faloff) {
            faloff = 1;
        } else {
            float d = (cos_theta - cos_width) / (cos_faloff - cos_width);
            faloff = (d * d) * (d * d);
        }
        record.pos = light.pos;
        record.triangle_pdf = 1.;
        record.n_s = wi;
        L = light.L * faloff;
        pdf_pos = 1.;
        pdf_dir = uniform_cone_pdf(cos_width);
        u = 0;
        v = 0;
    } else if (light_type == LIGHT_DIRECTIONAL) {
        vec3 dir = -normalize(light.to - light.pos);
        wi = -dir;
        vec3 v1, v2;
        make_coord_system(dir, v1, v2);
        vec2 uv = concentric_sample_disk(rands_dir);
        vec3 pos =
            light.world_center + light.world_radius * (uv.x * v1 + uv.y * v2);
        record.pos = pos + dir * light.world_radius;
        record.n_s = -dir;
        L = light.L;
        pdf_pos = 1. / (PI * light.world_radius * light.world_radius);
        record.triangle_pdf = pdf_pos;
        pdf_dir = 1.;
        u = 0;
        v = 0;
    }
    return L;
}

vec3 sample_light_Le(const int num_lights, const int total_light,
                     out uint light_idx, out uint triangle_idx,
                     out uint material_idx, out Light light,
                     out TriangleRecord record, out Material light_mat,
                     out float pdf_pos, inout uvec4 seed, out vec3 wi,
                     out float pdf_dir, out float phi, out float u,
                     out float v) {
    const vec4 rands_pos = vec4(rand(seed), rand(seed), rand(seed), rand(seed));
    const vec2 rands_dir = vec2(rand(seed), rand(seed));
    return sample_light_Le(rands_pos, rands_dir, num_lights, total_light,
                           light_idx, triangle_idx, material_idx, light, record,
                           light_mat, pdf_pos, seed, wi, pdf_dir, phi, u, v);
}

bool vcm_generate_light_sample(float eta_vc, out VCMState light_state,
                               inout VCMRestirData s, out float pdf_o) {
    
    uint light_idx;
    uint light_triangle_idx;
    uint light_material_idx;
    vec2 uv_unused;
    Light light;
    TriangleRecord record;
    Material light_mat;
    vec3 wi;
    float pdf_pos, pdf_dir, phi, u, v;
  
    
    const vec3 Le =
        sample_light_Le(pc_ray.num_lights, pc_ray.light_triangle_count,
                        light_idx, light_triangle_idx, light_material_idx,
                        light, record, light_mat, pdf_pos, seed, wi, pdf_dir, phi, u, v);
    float cos_theta = abs(dot(wi, record.n_s));
    if (pdf_dir <= EPS) {
        return false;
    }
    light_state.pos = record.pos;
    light_state.n_s = record.n_s;
    light_state.area = 1.0 / record.triangle_pdf;
    light_state.wi = wi;
    light_state.throughput =
        Le * cos_theta / (pdf_dir * pdf_pos);
    light_state.d_vcm = 1. / pdf_dir;
    light_state.d_vc = cos_theta / (pdf_dir * pdf_pos);
    light_state.d_vm = light_state.d_vc * eta_vc;
    s.pos = record.pos;
    s.dir = wi;
    s.normal = record.n_s;
    s.light_material_idx = light_material_idx;
    s.triangle_pdf = record.triangle_pdf;
    s.hash_idx = get_restir_hash_idx(light_idx, u, v);
    s.pdf_dir = pdf_dir;
    s.phi = phi;
    pdf_o = pdf_dir;
    return true;
}

void main() {
    if (should_resample.d != 0) {
        return;
    }
    if (pixel_idx == 0) {
        if(pc_ray.frame_num == 0) {
            avg.d.avg = 0;
            avg.d.prev = 0;
        } else {
            avg.d.avg = 0.6 * avg.d.avg + 0.4 * (pc_ray.frame_num - avg.d.prev);
            avg.d.prev = pc_ray.frame_num;
            //debugPrintfEXT("resampling %d, avg: %f\n", pc_ray.total_frame_num, avg.d.avg);
        }
    }

    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;
    vec4 origin = ubo.inv_view * vec4(0, 0, 0, 1);
    vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
    vec3 direction = vec3(sample_camera(d));
    float total_lum = 0;
    vec4 area_int = (ubo.inv_projection * vec4(2. / gl_LaunchSizeEXT.x,
                                               2. / gl_LaunchSizeEXT.y, 0, 1));
    area_int /= (area_int.w);
    const float cam_area = abs(area_int.x * area_int.y);
    VCMRestirData s;
    float pdf_o;
    const float radius = pc_ray.radius;
    const float radius_sqr = radius * radius;
    float eta_vcm = PI * radius_sqr * screen_size;
    float eta_vc = (pc_ray.use_vc == 1) ? 1.0 / eta_vcm : 0;
    float eta_vm = (pc_ray.use_vm == 1) ? PI * radius_sqr * screen_size : 0;
    VCMState light_state;
    bool result = vcm_generate_light_sample(eta_vc, light_state, s, pdf_o);
    if (!result) {
        return;
    }

    // Light tracing
    {
        const vec3 cam_pos = origin.xyz;
        const vec3 cam_nrm = vec3(-ubo.inv_view * vec4(0, 0, 1, 0));
        int depth;
        int path_idx = 0;
        for (depth = 1;; depth++) {
            traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, light_state.pos, tmin,
                        light_state.wi, tmax, 0);
            if (payload.material_idx == -1) {
                break;
            }
            vec3 wo = light_state.pos - payload.pos;

            vec3 n_s = payload.n_s;
            float cos_wo = dot(wo, n_s);
            vec3 n_g = payload.n_g;
            bool side = true;
            if (dot(payload.n_g, wo) <= 0.)
                n_g = -n_g;
            if (cos_wo <= 0.) {
                cos_wo = -cos_wo;
                n_s = -n_s;
                side = false;
            }

            if (dot(n_g, wo) * dot(n_s, wo) <= 0) {
                // We dont handle BTDF at the moment
                break;
            }
            float dist = length(payload.pos - light_state.pos);
            float dist_sqr = dist * dist;
            wo /= dist;
            const Material mat =
                load_material(payload.material_idx, payload.uv);
            const bool mat_specular =
                (mat.bsdf_props & BSDF_SPECULAR) == BSDF_SPECULAR;
            // Complete the missing geometry terms
            float cos_theta_wo = abs(dot(wo, n_s));
            // Can't connect from specular to camera path, can't merge either
            light_state.d_vcm *= dist_sqr;
            light_state.d_vcm /= cos_theta_wo;
            light_state.d_vc /= cos_theta_wo;
            light_state.d_vm /= cos_theta_wo;
            if (depth >= pc_ray.max_depth + 1) {
                break;
            }
            // Reverse pdf in solid angle form, since we have geometry term
            // at the outer paranthesis
            if (!mat_specular &&
                (pc_ray.use_vc == 1 && depth < pc_ray.max_depth)) {
                // Connect to camera
                ivec2 coords;
                vec3 splat_col = vcm_connect_cam(
                    cam_pos, cam_nrm, n_s, cam_area, payload.pos,
                    light_state, eta_vm, wo, mat, coords);
                float lum = luminance(splat_col);
                if (lum > 0) {
                    uint idx = coords.x * gl_LaunchSizeEXT.y + coords.y;
                    total_lum += lum;
                }
            }
            // Continue the walk
            float pdf_dir;
            float cos_theta;
            const vec3 f =
                sample_bsdf(n_s, wo, mat, 0, side, light_state.wi,
                            pdf_dir, cos_theta, seed);
            const bool same_hemisphere =
                same_hemisphere(light_state.wi, wo, n_s);

            const bool mat_transmissive =
                (mat.bsdf_props & BSDF_TRANSMISSIVE) == BSDF_TRANSMISSIVE;
            if (f == vec3(0) || pdf_dir == 0 ||
                (!same_hemisphere && !mat_transmissive)) {
                break;
            }
            float pdf_rev = pdf_dir;
            if (!mat_specular) {
                pdf_rev = bsdf_pdf(mat, n_s, light_state.wi, wo);
            }
            const float abs_cos_theta = abs(cos_theta);

            light_state.pos = offset_ray(payload.pos, n_s);
            // Note, same cancellations also occur here from now on
            // see _vcm_generate_light_sample_
            if (!mat_specular) {
                light_state.d_vc =
                    (abs_cos_theta / pdf_dir) *
                    (eta_vm + light_state.d_vcm + pdf_rev * light_state.d_vc);
                light_state.d_vm = (abs_cos_theta / pdf_dir) *
                                   (1 + light_state.d_vcm * eta_vc +
                                    pdf_rev * light_state.d_vm);
                light_state.d_vcm = 1.0 / pdf_dir;
            } else {
                // Specular pdf has value = inf, so d_vcm = 0;
                light_state.d_vcm = 0;
                // pdf_fwd = pdf_rev = delta -> cancels
                light_state.d_vc *= abs_cos_theta;
                light_state.d_vm *= abs_cos_theta;
            }

            light_state.throughput *= f * abs_cos_theta / pdf_dir;
            light_state.n_s = n_s;
            light_state.area = payload.area;
            light_state.material_idx = payload.material_idx;
        }
    }
    const float p_hat = total_lum;
    //const float p_hat = s.pdf_dir;
    if (p_hat > 0) {
        s.p_hat = p_hat;
        s.valid = 1;
        s.frame_idx = pc_ray.total_frame_num;
        atomicAdd(temporal_reservoirs.d[s.hash_idx].factor, 1);
        light_samples.d[pixel_idx] = s;
    }
#undef light_vtx
}