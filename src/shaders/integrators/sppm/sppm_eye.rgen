#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "sppm_commons.h"
#include "../../commons.glsl"
layout(location = 0) rayPayloadEXT HitPayload payload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;

layout(push_constant) uniform _PushConstantRay { PCSPPM pc; };
// SPPM buffers
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer SPPMData_ { SPPMData d[]; };

SPPMData_ sppm_data = SPPMData_(scene_desc.sppm_data_addr);

uint screen_size = gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y;
const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy,
                      pc.frame_num ^ pc.random_num);
#include "../pt_commons.glsl"

vec3 normalize_grid(vec3 p, vec3 min_bnds, vec3 max_bnds) {
    return (p - min_bnds) / (max_bnds - min_bnds);
}

ivec3 get_grid_idx(vec3 p, vec3 min_bnds, vec3 max_bnds, ivec3 grid_res) {
    ivec3 res = ivec3(normalize_grid(p, min_bnds, max_bnds) * grid_res);
    clamp(res, vec3(0), grid_res - vec3(1));
    return res;
}

void main() {
    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;
    vec4 origin = ubo.inv_view * vec4(0, 0, 0, 1);
    vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
    vec3 direction = vec3(sample_camera(d));
    vec4 area_int = (ubo.inv_projection * vec4(2. / gl_LaunchSizeEXT.x,
                                               2. / gl_LaunchSizeEXT.y, 0, 1));
    area_int /= (area_int.w);
    const float cam_area = abs(area_int.x * area_int.y);

    vec3 throughput = vec3(1.);
    vec3 col = vec3(0);
    uint M = 0;
    bool specular = false;
    bool surface_recorded = false;
    for (int d = 0;; d++) {
        traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, origin.xyz, tmin, direction,
                    tmax, 0);
        const bool found_isect = payload.material_idx != -1;
        if (!found_isect) {
            col += throughput * pc.sky_col;

            if (isnan(luminance(col))) break;

            sppm_data.d[pixel_idx].col = col;
            break;
        }
        if(d >= pc.max_depth - 1) {
            break;
        }
        const uint mat_idx = payload.material_idx;
        const vec2 mat_uv = payload.uv;
        const Material hit_mat = load_material(mat_idx, mat_uv);
        if (d == 0 || (specular && !surface_recorded)) {
            col += throughput * hit_mat.emissive_factor;

            if (isnan(luminance(col))) break;

            sppm_data.d[pixel_idx].col = col;
        }
        const vec3 wo = -direction;
        vec3 n_s = payload.n_s;
        bool side = true;
        vec3 n_g = payload.n_g;
        if (dot(payload.n_g, wo) < 0.)
            n_g = -n_g;
        if (dot(n_g, payload.n_s) < 0) {
            n_s = -n_s;
            side = false;
        }
        float cos_wo = dot(wo, n_s);
        const vec3 pos = payload.pos;
        origin.xyz = offset_ray(pos, n_g);
        specular = (hit_mat.bsdf_props & BSDF_FLAG_SPECULAR) != 0;
        if (!surface_recorded && !specular) {
            const float light_pick_pdf = 1. / pc.light_triangle_count;
            col +=
                throughput *
                uniform_sample_light(seed, hit_mat, pos, side, n_s, wo) /
                light_pick_pdf;

            if (isnan(luminance(col))) break;

            sppm_data.d[pixel_idx].col = col;
        }


        const bool mat_diffuse = (hit_mat.bsdf_type & BSDF_TYPE_DIFFUSE) != 0;
        if (!surface_recorded && mat_diffuse) {
            surface_recorded = true;
            sppm_data.d[pixel_idx].wo = wo;
            sppm_data.d[pixel_idx].p = pos;
            sppm_data.d[pixel_idx].material_idx = mat_idx;
            sppm_data.d[pixel_idx].uv = mat_uv;
            sppm_data.d[pixel_idx].throughput = throughput;
            sppm_data.d[pixel_idx].n_s = n_s;
            sppm_data.d[pixel_idx].path_len = d;
            sppm_data.d[pixel_idx].side = uint(side);
        }
        float pdf, cos_theta;
        const vec3 f_sampled = sample_bsdf(n_s, wo, hit_mat, 1, side,
                                           direction, pdf, cos_theta, seed);
        if (pdf < 1e-20 || dot(f_sampled, f_sampled) < 1e-20) {
            break;
        }
        throughput *= f_sampled * abs(cos_theta) / pdf;
        if (d > RR_MIN_DEPTH) {
            float rr_prob = luminance(throughput);
            if (rr_prob < rand(seed))
                break;
            else
                throughput /= rr_prob;
        }
    }
    if (pc.frame_num == 0) {
        sppm_data.d[pixel_idx].radius = pc.ppm_base_radius;
    }
}